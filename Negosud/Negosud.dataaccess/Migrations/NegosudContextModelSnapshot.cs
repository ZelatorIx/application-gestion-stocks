// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Negosud.dataaccess;

#nullable disable

namespace Negosud.dataaccess.Migrations
{
    [DbContext(typeof(NegosudContext))]
    partial class NegosudContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CommandCustomerCustomerOrderContent", b =>
                {
                    b.Property<int>("CommandCustomersId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerOrderContentsId")
                        .HasColumnType("int");

                    b.HasKey("CommandCustomersId", "CustomerOrderContentsId");

                    b.HasIndex("CustomerOrderContentsId");

                    b.ToTable("CommandCustomerCustomerOrderContent");
                });

            modelBuilder.Entity("CommandSupplierSupplierOrderContent", b =>
                {
                    b.Property<int>("CommandSuppliersId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierOrderContentsId")
                        .HasColumnType("int");

                    b.HasKey("CommandSuppliersId", "SupplierOrderContentsId");

                    b.HasIndex("SupplierOrderContentsId");

                    b.ToTable("CommandSupplierSupplierOrderContent");
                });

            modelBuilder.Entity("CustomerOrderContentItem", b =>
                {
                    b.Property<int>("CustomerOrderContentsId")
                        .HasColumnType("int");

                    b.Property<int>("ItemsId")
                        .HasColumnType("int");

                    b.HasKey("CustomerOrderContentsId", "ItemsId");

                    b.HasIndex("ItemsId");

                    b.ToTable("CustomerOrderContentItem");
                });

            modelBuilder.Entity("ItemStockMovement", b =>
                {
                    b.Property<int>("ItemsId")
                        .HasColumnType("int");

                    b.Property<int>("StockMovementsId")
                        .HasColumnType("int");

                    b.HasKey("ItemsId", "StockMovementsId");

                    b.HasIndex("StockMovementsId");

                    b.ToTable("ItemStockMovement");
                });

            modelBuilder.Entity("ItemSupplierOrderContent", b =>
                {
                    b.Property<int>("ItemsId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierOrderContentsId")
                        .HasColumnType("int");

                    b.HasKey("ItemsId", "SupplierOrderContentsId");

                    b.HasIndex("SupplierOrderContentsId");

                    b.ToTable("ItemSupplierOrderContent");
                });

            modelBuilder.Entity("Negosud.dataaccess.Tables.CommandCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CommandCustomers");
                });

            modelBuilder.Entity("Negosud.dataaccess.Tables.CommandSupplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("CommandSuppliers");
                });

            modelBuilder.Entity("Negosud.dataaccess.Tables.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.Property<string>("PhysicalAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Negosud.dataaccess.Tables.CustomerOrderContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("BeforePriceTax")
                        .HasColumnType("real");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<float>("Vat")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("CustomerOrderContents");
                });

            modelBuilder.Entity("Negosud.dataaccess.Tables.Family", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Families");
                });

            modelBuilder.Entity("Negosud.dataaccess.Tables.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FamilyId")
                        .HasColumnType("int");

                    b.Property<int>("MinLimit")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PurchasePriceBT")
                        .HasColumnType("real");

                    b.Property<float>("SellingPriceBT")
                        .HasColumnType("real");

                    b.Property<float>("Vat")
                        .HasColumnType("real");

                    b.Property<int>("YearItem")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FamilyId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Negosud.dataaccess.Tables.ReasonRegularization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Sense")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReasonRegularizations");
                });

            modelBuilder.Entity("Negosud.dataaccess.Tables.Regularization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Inventorist")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReasonRegularizationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReasonRegularizationId");

                    b.ToTable("Regularizations");
                });

            modelBuilder.Entity("Negosud.dataaccess.Tables.StockMovement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StockMovements");
                });

            modelBuilder.Entity("Negosud.dataaccess.Tables.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.Property<string>("PhysicalAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Negosud.dataaccess.Tables.SupplierOrderContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("BeforePriceTax")
                        .HasColumnType("real");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<float>("VAT")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("SupplierOrderContents");
                });

            modelBuilder.Entity("RegularizationStockMovement", b =>
                {
                    b.Property<int>("RegularizationsId")
                        .HasColumnType("int");

                    b.Property<int>("StockMovementsId")
                        .HasColumnType("int");

                    b.HasKey("RegularizationsId", "StockMovementsId");

                    b.HasIndex("StockMovementsId");

                    b.ToTable("RegularizationStockMovement");
                });

            modelBuilder.Entity("CommandCustomerCustomerOrderContent", b =>
                {
                    b.HasOne("Negosud.dataaccess.Tables.CommandCustomer", null)
                        .WithMany()
                        .HasForeignKey("CommandCustomersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Negosud.dataaccess.Tables.CustomerOrderContent", null)
                        .WithMany()
                        .HasForeignKey("CustomerOrderContentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommandSupplierSupplierOrderContent", b =>
                {
                    b.HasOne("Negosud.dataaccess.Tables.CommandSupplier", null)
                        .WithMany()
                        .HasForeignKey("CommandSuppliersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Negosud.dataaccess.Tables.SupplierOrderContent", null)
                        .WithMany()
                        .HasForeignKey("SupplierOrderContentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CustomerOrderContentItem", b =>
                {
                    b.HasOne("Negosud.dataaccess.Tables.CustomerOrderContent", null)
                        .WithMany()
                        .HasForeignKey("CustomerOrderContentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Negosud.dataaccess.Tables.Item", null)
                        .WithMany()
                        .HasForeignKey("ItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ItemStockMovement", b =>
                {
                    b.HasOne("Negosud.dataaccess.Tables.Item", null)
                        .WithMany()
                        .HasForeignKey("ItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Negosud.dataaccess.Tables.StockMovement", null)
                        .WithMany()
                        .HasForeignKey("StockMovementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ItemSupplierOrderContent", b =>
                {
                    b.HasOne("Negosud.dataaccess.Tables.Item", null)
                        .WithMany()
                        .HasForeignKey("ItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Negosud.dataaccess.Tables.SupplierOrderContent", null)
                        .WithMany()
                        .HasForeignKey("SupplierOrderContentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Negosud.dataaccess.Tables.CommandCustomer", b =>
                {
                    b.HasOne("Negosud.dataaccess.Tables.Customer", "Customer")
                        .WithMany("CommandCustomers")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Negosud.dataaccess.Tables.CommandSupplier", b =>
                {
                    b.HasOne("Negosud.dataaccess.Tables.Supplier", "Supplier")
                        .WithMany("CommandSuppliers")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Negosud.dataaccess.Tables.Item", b =>
                {
                    b.HasOne("Negosud.dataaccess.Tables.Family", "Family")
                        .WithMany("Items")
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Family");
                });

            modelBuilder.Entity("Negosud.dataaccess.Tables.Regularization", b =>
                {
                    b.HasOne("Negosud.dataaccess.Tables.ReasonRegularization", "ReasonRegularization")
                        .WithMany("Regularizations")
                        .HasForeignKey("ReasonRegularizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReasonRegularization");
                });

            modelBuilder.Entity("RegularizationStockMovement", b =>
                {
                    b.HasOne("Negosud.dataaccess.Tables.Regularization", null)
                        .WithMany()
                        .HasForeignKey("RegularizationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Negosud.dataaccess.Tables.StockMovement", null)
                        .WithMany()
                        .HasForeignKey("StockMovementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Negosud.dataaccess.Tables.Customer", b =>
                {
                    b.Navigation("CommandCustomers");
                });

            modelBuilder.Entity("Negosud.dataaccess.Tables.Family", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Negosud.dataaccess.Tables.ReasonRegularization", b =>
                {
                    b.Navigation("Regularizations");
                });

            modelBuilder.Entity("Negosud.dataaccess.Tables.Supplier", b =>
                {
                    b.Navigation("CommandSuppliers");
                });
#pragma warning restore 612, 618
        }
    }
}
